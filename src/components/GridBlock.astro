---
interface Props {
  /**
   * Align the content vertically
   */
  align?: 'start' | 'center' | 'end' | 'stretch'
  /**
   * Align the content horizontally
   */
  justify?: 'start' | 'center' | 'end' | 'stretch'
  /**
   * Label for the grid block
   */
  label?: string
}

const { align = 'center', justify = 'center', label } = Astro.props

/**
 * GridBlock Component
 *
 * @description A component that displays a grid of items
 */
---

<div class={`grid-block align-${align} justify-${justify}`}>
  {label && <span class="grid-block-label">{label}</span>}
  <slot />
</div>

<style lang="scss">
  .grid-block {
    display: flex;
    position: relative;
    justify-content: center;
    transition: height 0.3s ease-in-out;
    container-type: inline-size;
    border: 1px solid var(--border-color-subtle);
    border-radius: var(--radius-s);
    padding: calc(var(--space-m) + var(--space-2xs)) var(--space-2xs) var(--space-2xs);
    min-block-size: 325px;
    overflow-x: clip;

    &.align-start {
      align-items: flex-start;
    }

    &.align-center {
      align-items: center;
    }

    &.align-end {
      align-items: flex-end;
    }

    &.align-stretch {
      align-items: stretch;
    }

    &.justify-start {
      justify-content: flex-start;
    }

    &.justify-center {
      justify-content: center;
    }

    &-label {
      position: absolute;
      inset-block-start: 0;
      inset-inline-start: 0;
      border-bottom: 1px solid var(--border-color-subtle);
      padding: var(--space-4xs) var(--space-2xs);
      inline-size: 100%;
      color: rgba(from var(--foreground-color) r g b / 0.75);
      font-size: var(--font-size--2);
      letter-spacing: 0.05em;
      text-transform: uppercase;
    }
  }
</style>
