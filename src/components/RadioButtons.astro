---
// Imports (remove or replace this comment)

interface Props {
  /**
   * Additional classes to apply to the RadioButton
   */
  class?: string
  /**
   * The legend text for the fieldset
   */
  legend?: string
  /**
   * Array of radio button options
   */
  options?: Array<{ id: string; label: string; value: string }>
  /**
   * The name attribute for the radio group
   */
  name?: string
  /**
   * Whether the radio selection is required
   */
  required?: boolean
}

/**
 * RadioButton Component
 *
 * @description Custom styled radio buttons with accessible structure
 */

const {
  class: className,
  legend = "Who's your favorite Pok√©mon?",
  name = 'pokemon',
  required = true,
  options = [
    { id: 'astro', label: 'Astro', value: 'astro' },
    { id: 'vue', label: 'Vue', value: 'vue' },
  ],
} = Astro.props
---

<div class:list={[className, 'custom-radio-button']}>
  <fieldset class="custom-radio-button">
    <legend class="mb-4 text-xl font-bold">{legend}</legend>
    {
      options.map((option, index) => (
        <label for={option.id}>
          {option.label}
          <input
            id={option.id}
            type="radio"
            name={name}
            value={option.value}
            aria-required={required}
            checked={index === 0}
          />
          <span class="indicator" />
        </label>
      ))
    }
  </fieldset>
</div>

<style lang="scss">
  @use '../assets/scss/base/mixins' as *;

  label {
    display: flex;
    flex-direction: row-reverse;
    justify-content: flex-end;
    align-items: center;
    cursor: pointer;
    margin-block-end: var(--space-2xs);
  }

  input {
    position: absolute;
    opacity: 0;
    z-index: -1;
  }

  .indicator {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-inline-end: var(--space-2xs);
    border-radius: 50%;
    background: var(--color-background-base);
    inline-size: 20px;
    block-size: 20px;
  }

  .indicator::after {
    display: none;
    border: solid var(--color-foreground-base);
    border-width: 0 3px 3px 0;
    border-radius: 50%;
    background: var(--color-foreground-base);
    inline-size: 9px;
    block-size: 9px;
    content: '';
  }

  input:checked ~ .indicator {
    border-color: var(--color-foreground-base);
  }

  input:checked ~ .indicator::after {
    display: block;
  }

  label:focus input ~ .indicator {
    border-color: var(--color-foreground-base);
  }

  /* Enhanced focus styles for better accessibility */
  input:focus-visible ~ .indicator {
    @include outline();
    outline-offset: 2px;
  }
</style>
