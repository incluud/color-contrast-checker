---
import '../styles/tailwind.css'
import '../assets/scss/index.scss'
import SiteMeta from '../components/SiteMeta.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'

const {
  title = 'Color Contrast Checker',
  description = 'WCAG 2.2 color contrast validator with design system integration. Test accessibility compliance, generate OKLCH palettes, export CSS custom properties and Figma-compatible JSON tokens. Built with Astro.',
  url = Astro.site,
  image = 'social-preview-image.png',
  author = 'Incluud',
} = Astro.props
---

<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />

    <!-- favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <SiteMeta title={title} description={description.substring(0, 100)} url={url} image={image} author={author} />
  </head>
  <body>
    <Header />
    <main id="main-content" transition:animate="fade">
      <slot />
    </main>
    <Footer />

    <!-- Global ColorManager initialization -->
    <script>
      import('../scripts/global-color-manager.ts')
    </script>

    <!-- Scroll position preservation for view transitions -->
    <script is:inline>
      // Store scroll position before page swap
      let storedScrollPosition = 0

      // Before navigation (page being unloaded)
      window.addEventListener('pageswap', (event) => {
        // Store the current scroll position
        storedScrollPosition = window.scrollY
      })

      // After navigation (new page loaded)
      window.addEventListener('pagereveal', (event) => {
        // Only restore scroll position if we have one stored
        // and if this is a same-origin navigation (view transition)
        if (storedScrollPosition > 0 && event.viewTransition) {
          // Wait for the view transition to be ready, then restore scroll
          event.viewTransition.ready.then(() => {
            window.scrollTo({
              top: storedScrollPosition,
              behavior: 'instant', // Use instant to avoid conflicting with the slide animation
            })
            // Reset stored position
            storedScrollPosition = 0
          })
        }
      })
    </script>

    <style lang="scss" is:global>
      @use '../assets/scss/base/breakpoint' as *;

      :root {
        --color-foreground-base: #521b92;

        --color-foreground-10: oklch(from var(--color-foreground-base) 90% c h);
        --color-foreground-20: oklch(from var(--color-foreground-base) 80% c h);
        --color-foreground-30: oklch(from var(--color-foreground-base) 70% c h);
        --color-foreground-40: oklch(from var(--color-foreground-base) 60% c h);
        --color-foreground-50: oklch(from var(--color-foreground-base) 50% c h);

        --color-background-base: #fefc78;

        --color-background-10: oklch(from var(--color-background-base) 90% c h);
        --color-background-20: oklch(from var(--color-background-base) 80% c h);
        --color-background-30: oklch(from var(--color-background-base) 70% c h);
        --color-background-40: oklch(from var(--color-background-base) 60% c h);
        --color-background-50: oklch(from var(--color-background-base) 50% c h);
      }

      // sticky footer on low content pages
      html,
      body {
        height: 100%;
      }

      body {
        display: flex;
        flex-direction: column;
        // overflow-x: clip;

        main {
          flex: 1 0 auto;
        }

        footer {
          flex-shrink: 0;
        }
      }

      pre {
        border: 2px solid var(--link-color);
        border-radius: 0.35rem;
        padding: 1rem;
      }

      .interface {
        display: grid;
        grid-template-columns: 1fr;
        gap: var(--space-s);
        margin-inline: auto;
        max-width: 1600px;

        @include breakpoint(m) {
          grid-template-columns: 375px 1fr;
        }
      }

      .navigation-link {
        &:where(:hover, :focus-visible) {
          svg {
            animation: boop var(--animation-duration-hover) var(--animation-timing) forwards;
          }
        }
      }

      // @TODO: Temporary fixes for Accessible Astro Components, until package update
      // Accordion
      .accordion .title {
        h2 {
          justify-content: space-between;
          line-height: 1.2;

          .icon-chevron {
            flex-shrink: 0;
          }
        }

        .icon-chevron svg {
          @media (prefers-reduced-motion: no-preference) {
            transition: transform var(--transition-duration) var(--transition-easing);
          }
        }
      }

      // Avatar
      .avatar {
        .shape-rounded {
          border-radius: 50%;
        }
      }

      // Badge
      .badge {
        justify-content: center;
      }

      // Modal
      .modal-close-icon {
        display: inline-block;
        position: relative;
        aspect-ratio: 1;
        block-size: 20px;

        svg {
          position: absolute;
          margin: auto;
          inset: 0;

          &:first-of-type {
            transform: rotate(45deg);
          }

          &:last-of-type {
            transform: rotate(-45deg);

            @media (prefers-reduced-motion: no-preference) {
              transition: transform var(--transition-duration) var(--transition-easing);
            }
          }
        }
      }

      .modal-close button:hover .modal-close-icon,
      .modal-close button:focus-visible .modal-close-icon {
        svg:first-of-type {
          transform: rotate(0deg);
        }

        svg:last-of-type {
          transform: rotate(180deg);
        }
      }

      body:has(dialog[open]) {
        overflow-y: clip;
      }

      // Notification
      .notification {
        svg {
          inline-size: revert-layer;
          block-size: revert-layer;
        }
      }
    </style>
  </body>
</html>
