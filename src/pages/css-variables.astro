---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import Controls from '@components/Controls.astro'
import UserInterface from '@components/UserInterface.astro'
import ColorPalettes from '@components/ColorPalettes.astro'
import { Code } from 'astro-expressive-code/components'
import { Icon } from 'astro-icon/components'
import { Tabs, TabsList, TabsTab, TabsPanel } from 'accessible-astro-components'
---

<DefaultLayout title="Home">
  <section class="interface">
    <Controls />
    <UserInterface>
      <div slot="header">
        <a href="/" class="flex items-center gap-2">
          <Icon name="lucide:sparkles" size="1.5rem" />
          Render UI grid
        </a>
      </div>
      <div slot="body" class="wrapper">
        <div class="space-content">
          <h2 class="text-2xl font-bold">Color palettes</h2>
          <p>
            The color palettes are generated from the foreground and background colors. The foreground color is the base
            color, and the background color is the color of the container.
          </p>
          <p>
            Use these in your own project to create a consistent color scheme. Visual represetation of the shades bases
            on your selected fore- and background colors:
          </p>
          <ColorPalettes />
        </div>
        <Tabs>
          <TabsList>
            <TabsTab id="developers-tab" controls="developers-panel" selected>For Developers (CSS)</TabsTab>
            <TabsTab id="designers-tab" controls="designers-panel">For Designers (Figma)</TabsTab>
          </TabsList>

          <TabsPanel id="developers-panel" labelledby="developers-tab" selected>
            <Code
              code={`
 :root {
  --color-foreground-base: #4646ff;

  --color-foreground-10: oklch(from var(--color-foreground-base) 90% c h);
  --color-foreground-20: oklch(from var(--color-foreground-base) 80% c h);
  --color-foreground-30: oklch(from var(--color-foreground-base) 70% c h);
  --color-foreground-40: oklch(from var(--color-foreground-base) 60% c h);
  --color-foreground-50: oklch(from var(--color-foreground-base) 50% c h);

  --color-background-base: #e6e64a;

  --color-background-10: oklch(from var(--color-background-base) 90% c h);
  --color-background-20: oklch(from var(--color-background-base) 80% c h);
  --color-background-30: oklch(from var(--color-background-base) 70% c h);
  --color-background-40: oklch(from var(--color-background-base) 60% c h);
  --color-background-50: oklch(from var(--color-background-base) 50% c h);
}
`}
              lang="css"
            />
          </TabsPanel>
          <TabsPanel id="designers-panel" labelledby="designers-tab">
            <Code
              code={`{
  "collection_base_colors": {
    "color": {
      "$type": "color",
      "foreground-base": { "$value": "#4646ff" },
      "background-base": { "$value": "#e6e64a" }
    }
  },
  "collection_foreground_palette": {
    "$extensions": {
      "figma": { "collection": "Foreground Palette" }
    },
    "color": {
      "$type": "color",
      "foreground-10": { 
        "$value": "oklch(from {collection_base_colors.color.foreground-base} 90% c h)",
        "$description": "Lightest foreground shade"
      },
      "foreground-20": { 
        "$value": "oklch(from {collection_base_colors.color.foreground-base} 80% c h)" 
      },
      "foreground-30": { 
        "$value": "oklch(from {collection_base_colors.color.foreground-base} 70% c h)" 
      },
      "foreground-40": { 
        "$value": "oklch(from {collection_base_colors.color.foreground-base} 60% c h)" 
      },
      "foreground-50": { 
        "$value": "oklch(from {collection_base_colors.color.foreground-base} 50% c h)",
        "$description": "Darkest foreground shade"
      }
    }
  },
  "collection_background_palette": {
    "$extensions": {
      "figma": { "collection": "Background Palette" }
    },
    "color": {
      "$type": "color",
      "background-10": { 
        "$value": "oklch(from {collection_base_colors.color.background-base} 90% c h)",
        "$description": "Lightest background shade"
      },
      "background-20": { 
        "$value": "oklch(from {collection_base_colors.color.background-base} 80% c h)" 
      },
      "background-30": { 
        "$value": "oklch(from {collection_base_colors.color.background-base} 70% c h)" 
      },
      "background-40": { 
        "$value": "oklch(from {collection_base_colors.color.background-base} 60% c h)" 
      },
      "background-50": { 
        "$value": "oklch(from {collection_base_colors.color.background-base} 50% c h)",
        "$description": "Darkest background shade"
      }
    }
  }
}`}
              lang="json"
            />
          </TabsPanel>
        </Tabs>
      </div>
    </UserInterface>
  </section>

  <script is:inline>
    // Store handler reference for proper cleanup
    let currentStorageHandler = null

    function initializeDynamicCodeBlocks() {
      if (!window.ColorManager) {
        requestAnimationFrame(initializeDynamicCodeBlocks)
        return
      }

      // Only initialize if we're on the CSS variables page
      const developersContainer = document.getElementById('developers-panel')
      if (!developersContainer) {
        // Silently return - we're probably on a different page
        return
      }

      const designersContainer = document.getElementById('designers-panel')
      if (!designersContainer) {
        console.error('CSS Variables: designers-panel not found, but developers-panel exists')
        return
      }

      // Get original HTML structure to extract everything except the color values
      const originalDevelopersHtml = developersContainer.innerHTML
      const originalDesignersHtml = designersContainer.innerHTML

      /**
       * Update code blocks with new colors using precise text replacement
       */
      function updateCodeBlocks() {
        const fgColor = window.ColorManager.getForegroundColor()
        const bgColor = window.ColorManager.getBackgroundColor()

        if (!fgColor || !bgColor) return

        // Find all text nodes and replace hex colors in them
        // This preserves the DOM structure and syntax highlighting
        replaceTextInElement(developersContainer, fgColor, bgColor)
        replaceTextInElement(designersContainer, fgColor, bgColor)
      }

      /**
       * Replace hex colors in text nodes only, preserving DOM structure
       */
      function replaceTextInElement(container, fgColor, bgColor) {
        const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT, null, false)

        const textNodes = []
        let node
        while ((node = walker.nextNode())) {
          textNodes.push(node)
        }

        textNodes.forEach((textNode) => {
          let text = textNode.textContent
          let hasChanged = false

          // Only process text nodes that contain hex colors (3, 6, or 8 digits)
          if (/#[a-fA-F0-9]{3,8}/.test(text)) {
            // Check the context around this text node to determine color type
            let contextElement = textNode.parentElement
            let contextText = ''

            // Walk up the DOM to find meaningful context
            while (
              contextElement &&
              !contextText.includes('foreground-base') &&
              !contextText.includes('background-base')
            ) {
              contextText = contextElement.textContent || ''
              contextElement = contextElement.parentElement
            }

            // Replace hex color based on context (supports 3, 6, and 8 digit hex)
            text = text.replace(/#[a-fA-F0-9]{3,8}/g, (match) => {
              hasChanged = true

              if (contextText.includes('foreground-base')) {
                return fgColor
              } else if (contextText.includes('background-base')) {
                return bgColor
              }

              // Final fallback - shouldn't happen but just in case
              return match
            })
          }

          if (hasChanged) {
            textNode.textContent = text
          }
        })
      }

      // Initialize with current colors
      updateCodeBlocks()

      // Storage change handler for cross-tab updates
      const storageHandler = (event) => {
        if (event.key === 'color-contrast-checker') {
          updateCodeBlocks()
        }
      }

      // Clean up any existing listeners first
      document.removeEventListener('colorManagerUpdate', updateCodeBlocks)
      if (currentStorageHandler) {
        window.removeEventListener('storage', currentStorageHandler)
      }

      // Listen for color changes
      document.addEventListener('colorManagerUpdate', updateCodeBlocks)
      window.addEventListener('storage', storageHandler)

      // Store reference for future cleanup
      currentStorageHandler = storageHandler
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeDynamicCodeBlocks)
    } else {
      initializeDynamicCodeBlocks()
    }

    // Re-initialize on view transitions
    document.addEventListener('astro:page-load', () => {
      requestAnimationFrame(initializeDynamicCodeBlocks)
    })
  </script>

  <style lang="scss">
    .wrapper {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
      padding-block: var(--space-s);
    }
  </style>
</DefaultLayout>
